name: Trigger Release PR Workflow

on:
  push:
    branches:
      - develop

jobs:
  create-release-pr:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Ruby 3.1
        uses: actions/setup-ruby@v1
        with:
          ruby-version: 3.1

      - name: Create a release pull request
        id: create-release-pr
        env:
          RELEASE_NOTE_LINK: ${{ secrets.RELEASE_NOTE_LINK }}
          GIT_PR_RELEASE_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_PR_RELEASE_BRANCH_PRODUCTION: prod
          GIT_PR_RELEASE_BRANCH_STAGING: develop
          GIT_PR_RELEASE_LABELS: release
          GIT_PR_RELEASE_TEMPLATE: './.github/dev2prod-pr-template.erb'
        run: |
          gem install -N git-pr-release
          git-pr-release 1>&output.txt
          echo "PR_URL=`grep -oe 'https://github\.com/.*/pull/[0-9]*' output.txt`" >> $GITHUB_OUTPUT

      - name: Extract PR Number
        run: |
          NEW_PR_NUMBER=$(echo ${{ steps.create-release-pr.outputs.PR_URL }} | grep -oP 'pull/\K\d+')
          echo "NEW_PR_NUMBER=${NEW_PR_NUMBER}" >> $GITHUB_ENV

      - name: Check if the PR is a new one
        if: env.NEW_PR_NUMBER != ''
        run: |
          EXISTING_PR_NUMBER=$(curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/pulls?state=open&base=prod&head=${{ github.repository_owner }}:develop" | jq -r '.[0].number')
          if [ "$EXISTING_PR_NUMBER" == "$NEW_PR_NUMBER" ]; then
            echo "PR_EXISTS=false" >> $GITHUB_ENV
          else
            echo "PR_EXISTS=true" >> $GITHUB_ENV
          fi

      - name: Display PR existence status
        run: |
          echo "PR Exists: ${{ env.PR_EXISTS }}"