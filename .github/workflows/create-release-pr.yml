name: Trigger Release PR Workflow

on:
  push:
    branches:
      - develop

jobs:
  create-release-pr:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Ruby 3.1
        uses: actions/setup-ruby@v1
        with:
          ruby-version: 3.1

      - name: Create a release pull request
        id: create-release-pr
        env:
          RELEASE_NOTE_LINK: ${{ secrets.RELEASE_NOTE_LINK }}
          GIT_PR_RELEASE_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_PR_RELEASE_BRANCH_PRODUCTION: prod
          GIT_PR_RELEASE_BRANCH_STAGING: develop
          GIT_PR_RELEASE_LABELS: release
          GIT_PR_RELEASE_TEMPLATE: './.github/dev2prod-pr-template.erb'
        run: |
          gem install -N git-pr-release
          git-pr-release 1>&output.txt
          echo "PR_URL=`grep -oe 'https://github\.com/.*/pull/[0-9]*' output.txt`" >> $GITHUB_OUTPUT

      - name: Extract PR Number
        run: |
            PR_NUMBER=$(echo ${{ steps.create-release-pr.outputs.PR_URL }} | grep -oP 'pull/\K\d+')
            echo "PR_NUMBER=${PR_NUMBER}" >> $GITHUB_ENV

      - name: Check for existing PRs
        id: check-prs
        if: env.PR_NUMBER != ''
        run: |
          PR_RESPONSE=$(curl -H "Authorization: token ${{ secrets.accessToken }}" \
          -s "https://api.github.com/repos/${{ github.repository }}/pulls/${{ env.PR_NUMBER }}")
          echo "API Response: $PR_RESPONSE"
          PR_STATUS=$(echo "$PR_RESPONSE" | jq -r '.state')
          echo "PR Status: $PR_STATUS"
          if [ "$PR_STATUS" != "null" -a "$PR_STATUS" != "" ]; then
            PR_EXISTS=true
            PR_STATE=$PR_STATUS
          else
            PR_EXISTS=false
            PR_STATE=null
          fi
          echo "PR_STATE=${PR_STATE}" >> $GITHUB_ENV
          echo "PR_EXISTS=${PR_EXISTS}" >> $GITHUB_ENV

      - name: Display PR existence status
        run: |
          echo "PR Exists: ${{ env.PR_EXISTS }}"